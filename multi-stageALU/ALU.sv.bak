module ALU(
        input logic [9:0]A, B, IMM,
        input logic [3:0]FN,
        output logic [9:0]Q
);

logic [9:0]RES;

parameter   LOAD = 4'b0000,
            COPY = 4'b0001,
            ADD  = 4'b0010,
            SUB  = 4'b0011,
            INV  = 4'b0100,
            FLP  = 4'b0101,
            AND  = 4'b0110,
            OR   = 4'b0111,
            XOR  = 4'b1000,
            LSL  = 4'b1001,
            LSR  = 4'b1010,
            ASR  = 4'b1011,
            ADDI = 2'b1100,
            SUBI = 2'b1101;

always_comb
begin
    //all functions
    case(FN)
        LOAD:
            RES <= A;
        COPY:
            RES <= A;
        ADD:
            RES <= A + B;
        SUB:
            RES <= A - B;
        INV:
            RES <= -A;
        FLP:
            RES <= ~A;
        AND:
            RES <= A & B;
        OR:
            RES <= A | B;
        XOR:
            RES <= A ^ B;
        LSL:
            RES <= A << B;
        LSR:
            RES <= A >> B;
        ASR:
            RES <= A >>> B;
        ADDI:
            RES <= A + IMM[5:0];
        SUBI:
            RES <= A - IMM[5:0];
        default:
            RES <= 10'd0;
    endcase
end

assign Q = RES;

endmodule